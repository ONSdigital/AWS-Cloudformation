{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Elastic Load Balancers: Director, CF SSH & HTTP/HTTPS",

  "Parameters": {
    "DeploymentName": {
      "Type": "String",
      "Description": "Deployment Name",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "^([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]$",
      "ConstraintDescription": "Must be a valid domain label matching /^([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9]$/"
    },
    "HaCfName": {
      "Type": "String",
      "Description": "HA CF Name",
      "Default": "",
      "MinLength": "0",
      "MaxLength": "16",
      "AllowedPattern": "^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9])?$",
      "ConstraintDescription": "Must be a valid domain label matching /^(([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9])?$/"
    },
    "GenerateApplicationSslCertificate": {
      "Type": "String",
      "Default": "true",
      "Description": "Generate Application AWS SSL certificate - requires manual intervention to validate request email",
      "AllowedValues": [ "true", "false" ]
    },
    "ExistingApplicationSslCertificate": {
      "Type": "String",
      "Default": "",
      "Description": "Existing Application SSL certificate ARN",
      "AllowedPattern": "^(arn:aws::iam::[0-9]+:server-certificate/[0-9]+:[A-Za-z0-9-]+)?$",
      "ConstraintDescription": "AWS ACM SSL certificate ARN or empty"
    },

    "SslValidationDomain": {
      "Type": "String",
      "Default": "",
      "Description": "Domain to send the SSL validation emails to. Should be empty, or a the parent domain of HostedZone",
      "AllowedPattern": "^((([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+[A-Za-z0-9]{2,})?$",
      "ConstraintDescription": "Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\\.)+([A-Za-z0-9]{2,}$/ or empty"
    },

    "Availability": {
      "Type": "String",
      "Default": "SingleAZ",
      "Description": "Availability Type",
      "AllowedValues": [ "SingleAZ", "SingleAZ-HA", "MultiAZ" ]
    },
    "ApplicationElbTimeout": {
      "Type": "Number",
      "Default": "30",
      "Description": "Application ELB Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "ApplicationElbHealthCheckInternal": {
      "Type": "Number",
      "Default": "40",
      "Description": "Application ELB Health Check Interval",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "ApplicationElbHealthCheckTimeout": {
      "Type": "Number",
      "Default": "20",
      "Description": "Application ELB Health Check Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "ApplicationElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "Application ELB: Internet facing or internal load balancer",
      "AllowedValues": [ "internet-facing", "internal" ]
    },
    "DirectorElbHealthyThreshold": {
      "Type": "Number",
      "Default": "4",
      "Description": "Director ELB Healthy Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbUnhealthyThreshold": {
      "Type": "Number",
      "Default": "4",
      "Description": "Director ELB Unhealth Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbHealthCheckInternal": {
      "Type": "Number",
      "Default": "40",
      "Description": "Director ELB Health Check Interval",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbHealthCheckTimeout": {
      "Type": "Number",
      "Default": "20",
      "Description": "Director ELB Health Check Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "DirectorElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "Director ELB: Internet facing or internal load balancer",
      "AllowedValues": [ "internet-facing", "internal" ]
    },

    "CfSshElbHealthyThreshold": {
      "Type": "Number",
      "Default": "4",
      "Description": "Cloudfoundry SSH ELB Healthy Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "CfSshElbUnhealthyThreshold": {
      "Type": "Number",
      "Default": "4",
      "Description": "Cloudfoundry SSH ELB Unhealth Threshold",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "CfSshElbHealthCheckInternal": {
      "Type": "Number",
      "Default": "40",
      "Description": "Cloudfoundry SSH ELB Health Check Interval",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "CfSshElbHealthCheckTimeout": {
      "Type": "Number",
      "Default": "20",
      "Description": "Cloudfoundry SSH ELB Health Check Timeout",
      "MinValue": "1",
      "MaxValue": "999"
    },
    "CfSshElbScheme": {
      "Type": "String",
      "Default": "internet-facing",
      "Description": "CF SSH ELB: Internet facing or internal load balancer",
      "AllowedValues": [ "internet-facing", "internal" ]
    },

    "LbAz1Cidr": {
      "Type": "String",
      "Default": "10.0.10.0/24",
      "Description": "Loadbalancer AZ1 CIDR",
      "AllowedPattern": "^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])$",
      "ConstraintDescription": "Valid CIDR"
    },
    "LbAz2Cidr": {
      "Type": "String",
      "Default": "10.0.11.0/24",
      "Description": "Loadbalancer AZ2 CIDR",
      "AllowedPattern": "^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])$",
      "ConstraintDescription": "Valid CIDR"
  },

  "Outputs": {
    "ApplicationElb": {
      "Description": "Application ELB",
      "Value": { "Ref": "ApplicationElb" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElb" } }
    },
    "ApplicationElbCanonicalHostedZoneId": {
      "Description": "Application ELB Canonical Hosted Zone ID",
      "Value": { "Fn::GetAtt": [ "ApplicationElb","CanonicalHostedZoneID" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElbCanonicalHostedZoneId" } }
    },
    "ApplicationElbDnsName": {
      "Description": "ELB DNS Name",
      "Value": { "Fn::GetAtt": [ "ApplicationElb","DNSName" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElbDnsName" } }
    },
    "ApplicationElbTargetGroupTcp80": {
      "Description": "Application ELB Target Group TCP Port 80",
      "Value": { "Fn::Select": [ "1", { "Fn::Split": [ "/", { "Fn::GetAtt": [ "ApplicationElbTargetGroupTcp80", "TargetGroupFullName" ] } ] } ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElbTargetGroupTcp80" } }
    },
    "ApplicationElbTargetGroupTcp443": {
      "Description": "Application ELB Target Group TCP Port 443",
      "Condition": "ApplicationSslElb",
      "Value": { "Fn::Select": [ "1", { "Fn::Split": [ "/", { "Fn::GetAtt": [ "ApplicationElbTargetGroupTcp443", "TargetGroupFullName" ] } ] } ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElbTargetGroupTcp443" } }
    },
    "ApplicationElbTargetGroupTcp80Arn": {
      "Description": "Application ELB Target Group TCP Port 80 ARN",
      "Value": { "Ref": "ApplicationElbTargetGroupTcp80" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElbTargetGroupTcp80Arn" } }
    },
    "ApplicationElbTargetGroupTcp443Arn": {
      "Description": "Application ELB Target Group TCP Port 443 ARN",
      "Value": { "Ref": "ApplicationElbTargetGroupTcp443" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-ApplicationElbTargetGroupTcp443Arn" } }
    },
    "CfSshElbCanonicalHostedZoneId": {
      "Description": "CF SSH ELB Canonical Hosted Zone ID",
      "Value": { "Fn::GetAtt": [ "CfSshElb","CanonicalHostedZoneNameID" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-CfSshElbCanonicalHostedZoneId" } }
    },
    "CfSshElb": {
      "Description": "Cloudfoundry SSH External ELB",
      "Value": { "Ref": "CfSshElb" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-CfSshElb" } }
    },
    "CfSshElbDnsName": {
      "Description": "Cloudfoundry SSH ELB DNS Name",
      "Value": { "Fn::GetAtt": [ "CfSshElb","DNSName" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-CfSshElbDnsName" } }
    },
    "CfSshElbSecurityGroup": {
      "Description": "CF SSH ELB Security Group",
      "Value": { "Ref": "CfSshElbSecurityGroup" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-CfSshElbSecurityGroup" } }
    },
    "CfSshInstanceSecurityGroup": {
      "Description": "CF SSH Instance Security Group",
      "Value": { "Ref": "CfSshInstanceSecurityGroup" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-CfSshInstanceSecurityGroup" } }
    },
    "DirectorElb": {
      "Description": "Director External ELB",
      "Value": { "Ref": "DirectorElb" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-DirectorElb" } }
    },
    "DirectorElbCanonicalHostedZoneId": {
      "Description": "CF SSH ELB Canonical Hosted Zone ID",
      "Value": { "Fn::GetAtt": [ "DirectorElb","CanonicalHostedZoneNameID" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-DirectorElbCanonicalHostedZoneId" } }
    },
    "DirectorElbDnsName": {
      "Description": "Director ELB DNS Name",
      "Value": { "Fn::GetAtt": [ "DirectorElb","DNSName" ] },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-DirectorElbDnsName" } }
    },
    "DirectorElbSecurityGroup": {
      "Description": "Director ELB Security Group",
      "Value": { "Ref": "DirectorElbSecurityGroup" },
      "Export": { "Name": { "Fn::Sub": "${DeploymentName}-DirectorElbSecurityGroup" } }
    }
  },

  "Conditions": {
    "GenerateApplicationSslCertificate": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "GenerateApplicationSslCertificate" }, "true" ] },
	{ "Fn::Equals": [ { "Ref": "ExistingApplicationSslCertificate" }, "" ] }
      ]
    },
    "GenerateApplicationSslCertificateAndHaCfName": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "GenerateApplicationSslCertificate" }, "true" ] },
	{ "Fn::Not": [ { "Fn::Equals": [ { "Ref": "HaCfName" }, "" ] } ] },
	{ "Fn::Equals": [ { "Ref": "ExistingApplicationSslCertificate" }, "" ] }
      ]
    },
    "GenerateApplicationSslCertificateAndNoHaCfName": {
      "Fn::And": [
	{ "Fn::Equals": [ { "Ref": "HaCfName" }, "" ] },
        { "Fn::Equals": [ { "Ref": "GenerateApplicationSslCertificate" }, "true" ] },
	{ "Fn::Equals": [ { "Ref": "ExistingApplicationSslCertificate" }, "" ] }
      ]
    },

    "ApplicationSslElb": {
       "Fn::Or": [
         { "Fn::Equals": [ { "Ref": "GenerateApplicationSslCertificate" }, "true" ] },
         { "Fn::Not": [ { "Fn::Equals": [ { "Ref": "ExistingApplicationSslCertificate" }, "" ] } ] }
       ]
    },
    "ApplicationPlainTextElb": {
      "Fn::And": [
        { "Fn::Equals": [ { "Ref": "GenerateApplicationSslCertificate" }, "false" ] },
        { "Fn::Equals": [ { "Ref": "ExistingApplicationSslCertificate" }, "" ] }
      ]
    },

    "UseHostedZone": { "Fn::Equals": [ { "Ref": "SslValidationDomain" }, "" ] },
    "MultiAz": { "Fn::Equals": [ { "Ref": "Availability" }, "MultiAZ" ] }
  },

  "Resources": {
    "LbAz1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-AwsAvailabilityZone1" } },
        "CidrBlock": { "Ref": "LbAz1Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:LbAz1Subnet" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "LbAz2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-AwsAvailabilityZone2" } },
        "CidrBlock": { "Ref": "LbAz2Cidr" },
        "MapPublicIpOnLaunch": false,
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:LbAz2Subnet" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "LbAz1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "LbAz1Subnet" },
        "RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-InternetRouteTable" } }
      }
    },
    "LbAz2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "LbAz2Subnet" },
        "RouteTableId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-InternetRouteTable" } }
      }
    },

    "GeneratedApplicationSslCertificateAndHaCfName": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "GenerateApplicationSslCertificateAndHaCfName",
      "Properties": {
        "DomainName": { "Fn::Join": [ ".", [ "*.apps", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
        "SubjectAlternativeNames": [ { "Fn::Join": [ ".", [ "*.system", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] } ],
        "DomainValidationOptions": [
          {
            "DomainName": { "Fn::Join": [ ".", [ "*.apps", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          },
          {
            "DomainName": { "Fn::Join": [ ".", [ "*", { "Ref": "HaCfName" }, { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          },
          {
            "DomainName": { "Fn::Join": [ ".", [ "*.system", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:GeneratedApplicationSslCertificate" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "GeneratedApplicationSslCertificateAndNoHaCfName": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "GenerateApplicationSslCertificateAndNoHaCfName",
      "Properties": {
        "DomainName": { "Fn::Join": [ ".", [ "*.apps", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
        "SubjectAlternativeNames": [ { "Fn::Join": [ ".", [ "*.system", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] } ],
        "DomainValidationOptions": [
          {
            "DomainName": { "Fn::Join": [ ".", [ "*.apps", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          },
          {
            "DomainName": { "Fn::Join": [ ".", [ "*.system", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } } ] ] },
            "ValidationDomain": { "Fn::If": [ "UseHostedZone", { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-DomainName" } }, { "Ref": "SslValidationDomain" } ] }
          }
        ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:GeneratedApplicationSslCertificate" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "CfSshElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          { "Ref": "LbAz1Subnet" },
          { "Ref": "LbAz2Subnet" }
        ],
        "CrossZone": "true",
        "Listeners": [
          {
            "InstancePort": "2222",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "2222",
            "Protocol": "TCP"
          }
        ],
        "Scheme": { "Ref": "CfSshElbScheme" },
        "HealthCheck": {
          "HealthyThreshold": { "Ref": "CfSshElbHealthyThreshold" },
          "Interval": { "Ref": "CfSshElbHealthCheckInternal" },
          "Target": "HTTP:2223/",
          "Timeout": { "Ref": "CfSshElbHealthCheckTimeout" },
          "UnhealthyThreshold": { "Ref": "CfSshElbUnhealthyThreshold" }
        },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:CfSshElb" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ],
        "SecurityGroups": [ { "Ref": "CfSshElbSecurityGroup" } ]
      }
    },
    "DirectorElb": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          { "Ref": "LbAz1Subnet" },
          { "Ref": "LbAz2Subnet" }
        ],
        "CrossZone": "true",
        "Listeners": [
          {
            "InstancePort": "22",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "22",
            "Protocol": "TCP"
          },
          {
            "InstancePort": "6868",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "6868",
            "Protocol": "TCP"
          },
          {
            "InstancePort": "25555",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "25555",
            "Protocol": "TCP"
          }
        ],
        "Scheme": { "Ref": "DirectorElbScheme" },
        "HealthCheck": {
          "HealthyThreshold": { "Ref": "DirectorElbHealthyThreshold" },
          "Interval": { "Ref": "DirectorElbHealthCheckInternal" },
          "Target": "TCP:22",
          "Timeout": { "Ref": "DirectorElbHealthCheckTimeout" },
          "UnhealthyThreshold": { "Ref": "DirectorElbUnhealthyThreshold" }
        },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DirectorElb" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ],
        "SecurityGroups": [ { "Ref": "DirectorElbSecurityGroup" } ]
      }
    },


    "ApplicationElb": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": { "Ref": "ApplicationElbScheme" },
        "Subnets": [
          { "Ref": "LbAz1Subnet" },
          { "Ref": "LbAz2Subnet" }
        ],
        "LoadBalancerAttributes": [
          { "Key": "idle_timeout.timeout_seconds", "Value": { "Ref": "ApplicationElbTimeout" } }
        ],
        "SecurityGroups": [ { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-ApplicationLbSecurityGroup" } } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ApplicationElb" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ApplicationElbTargetGroupTcp80": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": "80",
        "Protocol": "HTTP",
        "HealthCheckIntervalSeconds": { "Ref": "ApplicationElbHealthCheckInternal" },
        "HealthCheckPath": "/health",
        "HealthCheckPort": "8080",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": { "Ref": "ApplicationElbHealthCheckTimeout" },
        "Targets": [],
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ApplicationElbTargetGroupTcp80" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "ApplicationElbTargetGroupTcp443": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": "443",
        "Protocol":"HTTPS",
        "HealthCheckIntervalSeconds": { "Ref": "ApplicationElbHealthCheckInternal" },
        "HealthCheckPath": "/health",
        "HealthCheckPort": "8080",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": { "Ref": "ApplicationElbHealthCheckTimeout" },
        "Targets": [],
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:ApplicationElbTargetGroupTcp443" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },

    "ApplicationElbListenerTcp80": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ApplicationElbTargetGroupTcp80" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ApplicationElb" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "ApplicationElbListenerTcp443": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Condition": "ApplicationSslElb",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Fn::If": [
                "GenerateApplicationSslCertificate",
                {
                  "Fn::If": [
                    "GenerateApplicationSslCertificateAndHaCfName",
                    { "Ref": "GeneratedApplicationSslCertificateAndHaCfName" },
                    { "Ref": "GeneratedApplicationSslCertificateAndNoHaCfName" }
                  ]
                },
                { "Ref": "ExistingApplicationSslCertificate" }
              ]
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ApplicationElbTargetGroupTcp443" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ApplicationElb" },
        "Port": "443",
        "Protocol": "HTTPS"
      }
    },

    "CfSshElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CF SSH ELB Security Group",
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:CfSshElbSecurityGroup" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "CfSshInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CF SSH Instance Security Group",
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:CfSshInstanceSecurityGroup" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ]
      }
    },
    "DirectorElbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Director ELB Security Group",
        "VpcId": { "Fn::ImportValue": { "Fn::Sub": "${DeploymentName}-CloudFoundryVpc" } },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Sub": "${DeploymentName}:DirectorElbSecurityGroup" } },
          { "Key": "deployment", "Value": { "Ref": "DeploymentName" } }
        ] 
      } 
    }
  }
}
